{"version":3,"sources":["components/Cleaner.js","App.js","serviceWorker.js","index.js"],"names":["Cleaner","handleChange","e","target","name","value","setState","srtCleaner","rawText","timeCodes","finalText","timeCodeTest","RegExp","scriptTest","splitText","split","console","log","i","length","test","push","handleSubmit","preventDefault","result","state","body","resultTimeCodes","resultText","bind","scriptResult","this","map","tb","tc","className","onSubmit","rows","onChange","type","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAgFeA,G,kBA5Ed,aAAc,IAAD,8BACZ,+CAYEC,aAAe,SAACC,GAAO,IAAD,EACIA,EAAEC,OAAjBC,EADW,EACXA,KAAMC,EADK,EACLA,MACb,EAAKC,SAAL,eACKF,EAAOC,KAhBN,EAoBVE,WAAa,SAACC,GAGf,IAAIC,EAAY,GACfC,EAAY,GACZC,EAAeC,OAAO,WACtBC,EAAaD,OAAO,UACpBE,EAAYN,EAAQO,MAAM,MAC1BC,QAAQC,IAAIH,GACb,IAAK,IAAII,EAAE,EAAGA,EAAIJ,EAAUK,OAAQD,IAC/BP,EAAaS,KAAKN,EAAUI,IAC/BT,EAAUY,KAAKP,EAAUI,IACfL,EAAWO,KAAKN,EAAUI,KACpCR,EAAUW,KAAKP,EAAUI,IAG3B,MAAO,CAACT,EAAUC,IApCP,EAuCVY,aAAe,SAACpB,GAClBA,EAAEqB,iBACF,IAAIC,EAAS,EAAKjB,WAAW,EAAKkB,MAAMC,MACxC,EAAKpB,SAAS,CACbqB,gBAAiBH,EAAO,GACxBI,WAAYJ,EAAO,MA1CpB,EAAKC,MAAQ,CACZC,KAAM,GACNC,gBAAiB,GACjBC,WAAY,IAEb,EAAK3B,aAAe,EAAKA,aAAa4B,KAAlB,gBACpB,EAAKP,aAAe,EAAKA,aAAaO,KAAlB,gBACpB,EAAKtB,WAAa,EAAKA,WAAWsB,KAAhB,gBATN,E,sEAiDZ,IAAIC,EAAeC,KAAKN,MAAMG,WAAWI,KAAI,SAACC,GAC7C,OAAQ,2BAAIA,MAETxB,EAAYsB,KAAKN,MAAME,gBAAgBK,KAAI,SAACE,GAC/C,OAAQ,2BAAIA,MAGX,OACE,yBAAKC,UAAU,sBACd,0BAAMC,SAAWL,KAAKT,aAAea,UAAU,6BACrC,2CACA,8BAAUE,KAAK,KAAKjC,KAAK,OAAOC,MAAO0B,KAAKN,MAAMC,KAAMY,SAAUP,KAAK9B,eAEvE,2BAAOkC,UAAU,oBAAoBI,KAAK,SAASlC,MAAM,YAE7D,6BACC,uCACA,yBAAK8B,UAAU,8BACd,6BAAM1B,GACN,6BAAMqB,U,GArECU,cCaPC,MAVf,WACE,OACE,yBAAKN,UAAU,OACb,mDACA,gIACA,kBAAC,EAAD,QCCcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3bdb32aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cleaner.css';\n\nclass Cleaner extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tbody: '',\n\t\t\tresultTimeCodes: [],\n\t\t\tresultText: [],\n\t\t}\n\t\tthis.handleChange = this.handleChange.bind(this)\n\t\tthis.handleSubmit = this.handleSubmit.bind(this)\n\t\tthis.srtCleaner = this.srtCleaner.bind(this)\n\t}\n\n\n    handleChange = (e) => {\n        const {name, value} = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    srtCleaner = (rawText) => {\n\t  // let firstClean = rawText.replace(/[\\n0-9,:>-]/g, \"\")\n\t  // let secondClean = firstClean.replace(/  +/g, ' ');\n\t  let timeCodes = [], \n\t  \tfinalText = [],\n\t  \ttimeCodeTest = RegExp(/[\\:>-]/g),\n\t  \tscriptTest = RegExp(/[a-z]/g),\n\t  \tsplitText = rawText.split(\"\\n\");\n\t  \tconsole.log(splitText)\n\t  for (let i=0; i < splitText.length; i++){\n\t  \tif (timeCodeTest.test(splitText[i])){\n\t  \t\ttimeCodes.push(splitText[i])\n\t  \t} else if (scriptTest.test(splitText[i])) {\n\t  \t\tfinalText.push(splitText[i])\n\t  \t}\n\t  }\n\t  return [timeCodes,finalText]\n\t}\n\n    handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tlet result = this.srtCleaner(this.state.body)\n\t\tthis.setState({\n\t\t\tresultTimeCodes: result[0],\n\t\t\tresultText: result[1]\n\t\t})\n\t}\n\n\trender() {\n\t\tlet scriptResult = this.state.resultText.map((tb) => {\n\t\t\treturn (<p>{tb}</p>)\n\t\t});\n\t\tlet timeCodes = this.state.resultTimeCodes.map((tc) => {\n\t\t\treturn (<p>{tc}</p>)\n\t\t});\n\n\t  \treturn (\n\t\t    <div className=\"cleaner-master m-0\">\n\t\t    \t<form onSubmit={ this.handleSubmit } className=\"flex flex-col flex-center\">\n\t                <h2>Paste Here:</h2>\n\t                <textarea rows=\"10\" name=\"body\" value={this.state.body} onChange={this.handleChange}>\n\t                </textarea>\n\t                <input className=\"submit-button m-0\" type=\"submit\" value=\"Submit\" />\n\t            </form>\n\t            <div>\n\t            \t<h2>Result:</h2>\n\t            \t<div className=\"flex flex-row space-around\">\n\t            \t\t<div>{timeCodes}</div>\n\t            \t\t<div>{scriptResult}</div>\n\t            \t</div>\n\t            </div>\n\t\t    </div>\n\t\t);\n\t}\n}\n\nexport default Cleaner;\n","import React from 'react';\nimport './App.css';\nimport './components/Utilities.css';\n\nimport Cleaner from './components/Cleaner'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>YouTube SRT Cleaner</h1>\n      <p>Paste in the text from a YouTube-generated .srt files and get back readable text. Happy birthday.</p>\n      <Cleaner />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}